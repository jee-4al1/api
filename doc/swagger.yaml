swagger: "2.0"
info:
  description: "JEE project"
  version: "1.0.0"
  title: "JEE project"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "inguyen2@myges.fr"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "jee-esgi.swagger.io"
basePath: "/v1"
tags:
- name: "sneakers"
  description: "List of sneaker from the public API"
  externalDocs:
    description: "Find out more"
    url: "https://thesneakerdatabase.com/api/"
- name: "wishlist"
  description: "Access to user wishlist"
- name: "user"
  description: "Operations about user"
schemes:
- "https"
- "http"
paths:
  /sneakers/:
    get:
      tags:
      - "sneakers"
      summary: "Retrieve all sneakers"
      description: ""
      operationId: "getAll"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Sneaker"
        "404":
          description: "No data found"
          
  /sneakers/{sneakerId}:
    get:
      tags:
      - "sneakers"
      summary: "Find sneaker by ID"
      description: "Returns a single pair of sneaker"
      operationId: "getSneakerById"
      produces:
      - "application/json"
      parameters:
      - name: "sneakerId"
        in: "path"
        description: "ID of sneaker to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Sneaker"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Sneaker not found"
  /sneakers/createWithArray:
    post:
      tags:
      - "sneakers"
      summary: "Creates list of sneakers with given input array"
      description: ""
      operationId: "createSneakersWithArrayInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of sneaker object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Sneaker"
      responses:
        default:
          description: "successful operation"
        "400":
          description: "Invalid data in the wishlist"
    
  /wishlist/{userId}:
    get:
      tags:
      - "wishlist"
      summary: "Returns sneakers from user wishlist"
      description: ""
      operationId: "getUserWishlist"
      produces:
      - "application/json"
      parameters: 
      - name: "userId"
        in: "path"
        description: "ID of user of whom to return the wishlist"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Wishlist"
        "400":
          description: "Invalid user ID supplied"
        "404":
          description: "Wishlist not found"

  /wishlist/:
    post:
      tags:
      - "wishlist"
      summary: "Add sneakers to wishlist"
      description: ""
      operationId: "addSneakersToWishlist"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "sneakers to add in the wishlist"
        required: true
        schema:
          $ref: "#/definitions/Wishlist"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Wishlist"
        "400":
          description: "Invalid data in the wishlist"
  /wishlist/remove/{sneakerId}:
    delete:
      tags:
      - "wishlist"
      summary: "Removes a sneaker from the wishlist"
      description: ""
      operationId: "removeSneakerInWishlist"
      produces:
      - "application/json"
      parameters:
      - name: "sneakerId"
        in: "path"
        description: "ID of the sneaker to be removed"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Sneaker not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  api_auth:
    type: "oauth2"
    authorizationUrl: "http://api-jee.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:wishlist: "modify your wishlist in your account"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Wishlist:
    type: "object"
    properties:
      id:
        type: "string"
      userId:
        type: "string"
      sneaker:
        $ref: "#/definitions/Sneaker"
  User:
    type: "object"
    properties:
      id:
        type: "string"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Sneaker:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "string"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        items:
          type: "string"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"